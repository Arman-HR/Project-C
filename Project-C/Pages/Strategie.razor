@using Model

<PageTitle>Strategie</PageTitle>

@code {
    private static Guid OGSM_ID {get; set;}
    protected override void OnInitialized()
    {
        // Get the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Get the query parameters
        var queryString = uri.Query;

        // Parse the query string to retrieve specific parameters
        var queryParameters = System.Web.HttpUtility.ParseQueryString(queryString);

        // Retrieve the 'ID' parameter
        var stringID = queryParameters["ID"];

        // Convert to Guid
        OGSM_ID = new Guid(stringID);

        Console.WriteLine($"Strategie OGSM ID: {OGSM_ID}");
        inputList = Load();
    }
}

<h1>(@inputList.Count())</h1>


<style>
    /* Define a custom class for the checkbox */
    .larger-checkbox input[type="checkbox"] {
        /* Increase the size of the checkbox */
        transform: scale(1.5);
    }
</style>



<ul>
    @foreach (var strategie in inputList)
    {
        <!-- Apply the custom class to the checkbox -->
        <div class="larger-checkbox">
            <input type="checkbox" @bind="strategie.IsDone" onclick="@(() => HandleCheckboxClick(strategie))"/>
            <textarea @bind="strategie.Title" readonly></textarea>
            @{
                var maxLength = 50; 

                // Checking the length of the text and adding a newline if it exceeds maxLength
                if (strategie.Title.Length > maxLength)
                {
                    strategie.Title = strategie.Title.Substring(0, maxLength) + "\n" + strategie.Title.Substring(maxLength);
                }
            }
        </div>
    }
</ul>

@code{
    
    void HandleCheckboxClick(TodoItem strategie)
    {
        foreach (var strat in inputList)
        {
            if (strategie == strat)
            {
                UncheckAllExcept(strategie);
            }
        }
    }

    void UncheckAllExcept(TodoItem strategie)
    {
        foreach (var strat in inputList)
        {
            if (strategie != strat)
            {
                strat.IsDone = false;
            }
        }
    }
}

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<input placeholder="New Strategie" @bind="userInput" />
<button @onclick="Add">Add New</button>
<button @onclick="Update">Update</button>

@code {

    private string userInput = "";
    private List<TodoItem> inputList = new List<TodoItem>();

    private void Add()
    {
        if (userInput != null && userInput != "")
        {
            Model.Strategies new_strategie = new(Guid.NewGuid(), userInput);
            Controller_Strategies.AddStrategie(OGSM_ID, new_strategie);
            inputList.Add(new TodoItem { ID = new_strategie.ID, Title = new_strategie.Name });
            userInput = "";
            Console.WriteLine($"Strategie ID {new_strategie.ID}");
        }
    }

    private void Update()
    {
        foreach (var strategie in inputList)
        {
            if (strategie.IsDone)
            {
                if (userInput != null && userInput != "")
                {
                    Controller_Strategies.UpdateStrategie(strategie.ID, userInput);
                    strategie.Title = userInput;
                    userInput = "";
                    Console.WriteLine($"Updated Strategie ID {strategie.ID}");
                }
            }
        }
    }

    private static List<TodoItem> Load()
    {
        Model.OGSM current_OGSM = Controller_OGSMs.GetOGSM_byID(OGSM_ID);
        
        if (current_OGSM is not null)
        {
            return Controller_Strategies.GetStrategies(current_OGSM);
        }
        
        Console.WriteLine("OGSM not found");
        return new List<TodoItem>();
    }
}